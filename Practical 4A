#Metrics for IR (Precision)
def calculate_metrics(retrieved_set, relevant_set):
    true_positive = len(retrieved_set.intersection(relevant_set))
    false_positive = len(retrieved_set.difference(relevant_set))
    false_negative = len(relevant_set.difference(retrieved_set))

    print("True Positive:", true_positive)
    print("False Positive:", false_positive)
    print("False Negative:", false_negative)
    print()

    precision = true_positive / (true_positive + false_positive) if (true_positive + false_positive) else 0
    recall = true_positive / (true_positive + false_negative) if (true_positive + false_negative) else 0
    f_measure = (2 * precision * recall / (precision + recall)) if (precision + recall) else 0

    return precision, recall, f_measure

retrieved_set = set(["doc1", "doc2", "doc3"])   
relevant_set = set(["doc1", "doc4"])           

precision, recall, f_measure = calculate_metrics(retrieved_set, relevant_set)

print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F-measure: {f_measure:.2f}")

_______________________________________________________

def calculate_metrics_from_counts(tp, fp, fn):
    print("True Positive:", tp)
    print("False Positive:", fp)
    print("False Negative:", fn)
    print()

    precision = tp / (tp + fp) if (tp + fp) else 0
    recall = tp / (tp + fn) if (tp + fn) else 0
    f_measure = (2 * precision * recall / (precision + recall)) if (precision + recall) else 0

    return precision, recall, f_measure

# Given values
tp = 20
fp = 10
fn = 30

precision, recall, f_measure = calculate_metrics_from_counts(tp, fp, fn)

print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F-measure: {f_measure:.2f}")
